import yaml
from tqdm import tqdm

from game_Truco import Game as Game
from greedyAgent import GreedyAgent
from fixedAgent import FixedAgent

def main():
    with open('trainerParams.yml', 'r') as params_file:
        params = yaml.safe_load(params_file)
    iterationToTest = 44_000_000
    iterationOfHotStart = 44_000_000
    print(f"Testing iteration {iterationToTest}")
    print("Started testing exploitability of P1...")
    agent1 = FixedAgent(True, params["training_params"])
    agent1.loadAvgPolicy(f"./trainedModels/truco/paramTesting/model1/agent1_iteration_{iterationToTest}.pt")
    agent2 = GreedyAgent(False, params["exploitability_testing_params"])
    agent2.loadHotStart(f"./trainedModels/truco/paramTesting/model1/agent2_greedy_iteration_{iterationOfHotStart}.pt")

    acumRewardFixedP1 = 0
    iterationsOnFixedP1 = 0
    episodes = params["exploitability_testing_params"]["episodes"]
    for iteration in tqdm(range(episodes)):
        game = Game()
        s = game.getState()
        r = 0
        t = False

        while(not game.gameFinished()):
            if(game.getIsP1Turn()):
                actionIdx = agent1.chooseActionWithPolicy(s[:])
            else:
                actionIdx = agent2.chooseAction(s[:])
            
            (s1, r1, t1) = game.step(actionIdx)
            s = s1[:]
            r = r1
            t = t1

            if(iteration > episodes*0.75):
                acumRewardFixedP1 += r
                iterationsOnFixedP1 += 1

            if(((not game.getIsP1Turn()) or game.gameFinished()) and agent2.getIsWaitingForFeedback()):
                agent2.receiveFeedback(s[:], r, t)
    print("Exploitability of P1: ", acumRewardFixedP1/iterationsOnFixedP1)          

    print("Started testing exploitability of P2...")
    agent2 = FixedAgent(False, params["training_params"])
    agent2.loadAvgPolicy(f"./trainedModels/truco/paramTesting/model1/agent2_iteration_{iterationToTest}.pt")
    agent1 = GreedyAgent(True, params["exploitability_testing_params"])
    agent1.loadHotStart(f"./trainedModels/truco/paramTesting/model1/agent1_greedy_iteration_{iterationOfHotStart}.pt")

    acumRewardFixedP2 = 0
    iterationsOnFixedP2 = 0
    for iteration in tqdm(range(episodes)):
        game = Game()
        s = game.getState()
        r = 0
        t = False

        while(not game.gameFinished()):
            if(game.getIsP1Turn()):
                actionIdx = agent1.chooseAction(s[:])
            else:
                actionIdx = agent2.chooseActionWithPolicy(s[:])
            
            (s1, r1, t1) = game.step(actionIdx)
            s = s1[:]
            r = r1
            t = t1

            if(episodes):
                acumRewardFixedP2 += r
                iterationsOnFixedP2 += 1

            if(((game.getIsP1Turn()) or game.gameFinished()) and agent1.getIsWaitingForFeedback()):
                agent1.receiveFeedback(s[:], r, t)
    print("Exploitability of P2: ", acumRewardFixedP2/iterationsOnFixedP2)          
    


if __name__ == '__main__':
    main()
