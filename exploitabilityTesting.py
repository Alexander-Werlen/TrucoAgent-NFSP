import yaml
from tqdm import tqdm

from game_Truco import Game as Game
from greedyAgent import GreedyAgent
from fixedAgent import FixedAgent

def main():
    modelToTest = "4"
    with open('trainerParams.yml', 'r') as params_file:
        params = yaml.safe_load(params_file)
        params2 = params[f"model2"]
        params = params[f"model4"]

    testAgainstSelfGreedy = False
    iterationToTest = 23_000_000
    iterationOfHotStart = iterationToTest
    print(f"Testing iteration {iterationToTest} of model {modelToTest} against", "self-greedy" if testAgainstSelfGreedy else "pre-trained-model")
    print("Started testing exploitability of P1...")
    agent1 = FixedAgent(True, params["training_params"])
    agent1.loadAvgPolicy(f"./trainedModels/truco/paramTesting/model{modelToTest}/agent1_iteration_{iterationToTest}.pt")
    agent2 = GreedyAgent(False, params["exploitability_testing_params"])
    agent2.loadHotStart(f"./trainedModels/truco/paramTesting/model{modelToTest}/agent2_greedy_iteration_{iterationOfHotStart}.pt")

    #### Avg vs Avg
    if(not testAgainstSelfGreedy):
        agent2 = FixedAgent(False, params2["training_params"])
        agent2.loadAvgPolicy(f"./trainedModels/truco/paramTesting/model2/agent2_iteration_{11_000_000}.pt")
    
    acumRewardFixedP1 = 0
    episodes = params["exploitability_testing_params"]["episodes"]
    for iteration in tqdm(range(episodes)):
        game = Game()
        s = game.getState()
        r = 0
        t = False

        while(not game.gameFinished()):
            if(r!=0):
                raise Exception("Reward was not 0 when it should be")
            
            if(game.getIsP1Turn()):
                actionIdx = agent1.chooseActionWithPolicy(s[:])
            else:
                actionIdx = agent2.chooseAction(s[:])
            
            (s1, r1, t1) = game.step(actionIdx)
            s = s1[:]
            r = r1
            t = t1

            acumRewardFixedP1 += r

    print("Exploitability of P1: ", acumRewardFixedP1/episodes)        
    if(acumRewardFixedP1 > 0):
        print("Warning: P1 was better than greedy opponent") 

    print("Started testing exploitability of P2...")
    agent2 = FixedAgent(False, params["training_params"])
    agent2.loadAvgPolicy(f"./trainedModels/truco/paramTesting/model{modelToTest}/agent2_iteration_{iterationToTest}.pt")
    agent1 = GreedyAgent(True, params["exploitability_testing_params"])
    agent1.loadHotStart(f"./trainedModels/truco/paramTesting/model{modelToTest}/agent1_greedy_iteration_{iterationOfHotStart}.pt")

    #### Avg vs Avg
    if(not testAgainstSelfGreedy):
        agent1 = FixedAgent(True, params2["training_params"])
        agent1.loadAvgPolicy(f"./trainedModels/truco/paramTesting/model2/agent1_iteration_{11_000_000}.pt")

    acumRewardFixedP2 = 0
    for iteration in tqdm(range(episodes)):
        game = Game()
        s = game.getState()
        r = 0
        t = False

        while(not game.gameFinished()):
            if(r!=0):
                raise Exception("Reward was not 0 when it should be")
            
            if(game.getIsP1Turn()):
                actionIdx = agent1.chooseAction(s[:])
            else:
                actionIdx = agent2.chooseActionWithPolicy(s[:])
            
            (s1, r1, t1) = game.step(actionIdx)
            s = s1[:]
            r = r1
            t = t1

            acumRewardFixedP2 += r

    print("Exploitability of P2: ", acumRewardFixedP2/episodes)
    if(acumRewardFixedP2 < 0):
        print("Warning: P2 was better than greedy opponent")   
    

if __name__ == '__main__':
    main()
